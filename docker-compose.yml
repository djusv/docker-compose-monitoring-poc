version: '3'
networks:
  monitoring:
    driver: bridge
  bff:
    driver: bridge
volumes:
    prometheus_data: {}
    grafana_data: {}
services:

  # prometheus:
  #   image: prom/prometheus:v2.45.0
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #   ports:
  #     - 9090:9090
  #   expose:
  #     - 9090
  #   networks:
  #     - monitoring

  # grafana:
  #   image: grafana/grafana:9.5.6
  #   container_name: grafana
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning:/etc/grafana/provisioning
  #   environment:
  #     - GF_AUTH_DISABLE_LOGIN_FORM=true
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #   ports:
  #     - 3000:3000
  #   env_file:
  #     - ./grafana/config.monitoring
  #   networks:
  #     - monitoring

  mongo:
    restart: always
    image: mongo:6.0.8
    volumes:
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./mongo/data:/data/db
    networks:
      - bff
    expose:
      - 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: pass

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8008:8081
  #   networks:
  #     - bff
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: admin
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: pass
  #     ME_CONFIG_MONGODB_URL: mongodb://admin:pass@mongo:27017/

  # cadvisor:
  #   image: google/cadvisor
  #   container_name: cadvisor
  #   volumes:
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   ports:
  #     - "7070:8080"
  #   restart: always
  #   networks:
  #     - monitoring

  # node-exporter:
  #   image: prom/node-exporter
  #   container_name: node-exporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.sysfs=/host/sys'
  #     - --collector.filesystem.ignored-mount-points
  #     - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
  #   ports:
  #     - 9100:9100
  #   restart: always
  #   networks:
  #     - monitoring

  node-app-express:
    container_name: node-app-express
    build:
      context: ./ServiceA
      dockerfile: ./Dockerfile
    depends_on:
      - mongo
    ports:
      - 8080:3001
    networks:
      - monitoring
      - bff
    environment:
      MONGODB_URI: mongodb://mongo:27017/sample_db
      MONGODB_USER: admin
      MONGODB_PASS: pass

  # java-app-spring:
  #   container_name: java-app-spring
  #   build:
  #     context: ./ServiceB
  #     dockerfile: ./Dockerfile
  #   depends_on:
  #     - mongo
  #   ports:
  #     - 8081:3002
  #   networks:
  #     - monitoring
  #     - bff

  # deno-app-oak:
  #   container_name: deno-app-oak
  #   build:
  #     context: ./ServiceC
  #     dockerfile: ./Dockerfile
  #   depends_on:
  #     - mongo
  #   ports:
  #     - 8082:3003
  #   networks:
  #     - monitoring
  #     - bff

  # deno-app-express:
  #   container_name: deno-app-express
  #   build:
  #     context: ./ServiceD
  #     dockerfile: ./Dockerfile
  #   depends_on:
  #     - mongo
  #   ports:
  #     - 8083:3004
  #   networks:
  #     - monitoring
  #     - bff
